#+TITLE: Andre's Emacs configuration

* Configuration
** About
This file was created using [[http://orgmode.org/worg/org-contrib/babel/][org-babel]] mode.
It is an example of literate programming.

Inspired by [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha's Emacs configuration]].

** Initialisation
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
#+END_SRC

** General
*** Relative numbers
From http://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'relative-line-numbers-mode t)
(add-hook 'org-mode-hook 'line-number-mode t)
(add-hook 'org-mode-hook 'column-number-mode t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'relative-line-numbers-mode t)
(add-hook 'prog-mode-hook 'line-number-mode t)
(add-hook 'prog-mode-hook 'column-number-mode t)
#+END_SRC
   
*** Move between windows
Use super + arrow keys to move between Emacs windows.

#+BEGIN_SRC emacs-lisp
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings 'super))
#+END_SRC

*** Change "yes or no" to "y or n"
From http://pages.sachachua.com/.emacs.d/Sacha.html
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Bell
Use visual alarm instead of sound.
#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC

*** Backups
From http://pages.sachachua.com/.emacs.d/Sacha.html#unnumbered-1
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)    ; do not delete old versions
(setq version-control t)         ; backups are numbered
(setq vc-make-backup-files t)    ; by default, emacs does not backup files managed by a version control system. Setting it to "t" modifies that.
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

*** Get system's environment variables
[[https://github.com/purcell/exec-path-from-shell][Purcell's package]] =exec-path-from-shell= makes this easy on OS X.
#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+END_SRC

** Helm
*** Keybindings and initialisation
Some snippets of code were taken from http://tuhdo.github.io/helm-intro.html
#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-config)
#+END_SRC

#+NAME helm-keybindings
| Key     | Command                        | Description                         |
|---------+--------------------------------+-------------------------------------|
| TAB     | helm-execute-persistent-action | Perform action without exiting helm |
| C-z     | helm-select-action             | List actions for current item       |
| C-c h o | helm-occur                     | Replace default =occur=             |
| C-c h g | helm-google-suggest            | Open Google search for given string |
| C-x b   | helm-mini                      | List buffers and recentf            |
| M-x     | helm-M-x                       | Replace default M-x                 |

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
(global-set-key (kbd "C-c h o") 'helm-occur)
(global-set-key (kbd "C-c h g") 'helm-google-suggest)

(global-set-key (kbd "M-x") 'helm-M-x)
(setq helm-M-x-fuzzy-match t) ;; fuzzy matching for helm-M-x

(global-set-key (kbd "C-x b") 'helm-mini)
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd "C-z") 'helm-select-action) ; list actions using C-z

(helm-mode 1)
#+END_SRC

*** helm-locate
Adjust the right =locate= command depending on the operational system.
From https://github.com/xiaohanyu/oh-my-emacs/commit/34bf80a0fea61ff1112accfb8448a45dafd2204a
#+BEGIN_SRC emacs-lisp
(require 'cl) ; otherwise emacs complains about "case" in the following block
(setq helm-locate-command
      (case system-type
            ('gnu/linux "locate -i -r %s")
            ('berkeley-unix "locate -i %s")
            ('windows-nt "es %s")
            ('darwin "mdfind -name %s %s")
            (t "locate %s")))
#+END_SRC

*** helm-descbinds
Alternative to default describe-bindings
#+BEGIN_SRC emacs-lisp
(require 'helm-descbinds)
(helm-descbinds-mode)
#+END_SRC
*** Use ibuffer
** Customise interface
*** custom-set-variables
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.

 ; consider all themes as safe
 '(custom-safe-themes t)
 ; start maximized
 '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC

*** custom-set-faces
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 120 :width normal :foundry "nil" :family "Monaco")))))
#+END_SRC

** Org-mode configuration

*** Org-mode global suggested keys
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

*** Timestamps in done tasks
#+BEGIN_SRC emacs-lisp
(setq org-log-done t)
#+END_SRC

*** Remember cursor position
#+BEGIN_SRC emacs-lisp
(setq save-place-file "~/.emacs.d/saveplace")
(setq-default save-place t)
(require 'saveplace)
#+END_SRC

** Evil
*** evil-leader
Use space as the leader key.
Required before =evil-mode= is enabled.

#+BEGIN_SRC emacs-lisp
(global-evil-leader-mode)
; enable C-<leader> when not in normal mode
(setq evil-leader/in-all-states 1)
(evil-leader/set-leader "<SPC>")
(evil-leader/set-key
  "f" 'helm-M-x
  "h" 'help-command
  "j" 'helm-mini
  "k" 'kill-this-buffer
  "l" 'helm-locate
  "m" 'helm-imenu
  "o" 'other-window
  "q" 'save-buffers-kill-terminal
  "E" 'go-errcheck
  "w" 'save-buffer
  "W" 'save-some-buffers
  "z" 'suspend-emacs
  "<SPC>" 'evilnc-comment-or-uncomment-lines
  ; evil-nerd-commenter
  "ci" 'evilnc-comment-or-uncomment-lines
  "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
  "cc" 'evilnc-copy-and-comment-lines
  "cp" 'evilnc-comment-or-uncomment-paragraphs
  "cr" 'comment-or-uncomment-region
  "cv" 'evilnc-toggle-invert-comment-line-by-line
  " "  'evilnc-comment-operator ; Use <SPC> instead of \\
  )
#+END_SRC

*** Org-mode keybindings
Based on https://github.com/edwtjo/evil-org-mode.
#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal org-mode-map
  "<" 'org-metaleft
  ">" 'org-metaright
  "gh" 'outline-up-heading
  "gl" 'outline-next-visible-heading
  "gj" 'org-forward-heading-same-level
  "gk" 'org-backward-heading-same-level
  (kbd "TAB") 'org-cycle ; overwrites evil C-i in terminal
  )
#+END_SRC

*** Enable evil-mode
#+BEGIN_SRC emacs-lisp
(evil-mode 1)
#+END_SRC

*** Make esc like C-g
From https://github.com/davvil/.emacs.d/blob/master/init.el
#+BEGIN_SRC emacs-lisp
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
(global-set-key [escape] 'evil-exit-emacs-state)
#+END_SRC

*** Evil related packages
**** evil-numbers
#+BEGIN_SRC emacs-lisp
(require 'evil-numbers)
#+END_SRC

**** evil-surround
#+BEGIN_SRC emacs-lisp
(require 'evil-surround)
(global-evil-surround-mode 1)
#+END_SRC

**** evil-visualstar
#+BEGIN_SRC emacs-lisp
(global-evil-visualstar-mode)
#+END_SRC

** Theme & visual configuration
*** Disable blinking cursor
    Restore sanity.
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC
*** Remove scrollbars, menu bars, and toolbars
#+BEGIN_SRC emacs-lisp
(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

*** Theme
#+BEGIN_SRC emacs-lisp
(if window-system
    ;; (load-theme 'sanityinc-solarized-light t)
    (load-theme 'zenburn t)
  (load-theme 'wombat t))
#+END_SRC

*** Disable current theme before loading new one
From http://stackoverflow.com/a/15595000
#+BEGIN_SRC emacs-lisp
(defadvice load-theme 
  (before theme-dont-propagate activate)
  (mapcar #'disable-theme custom-enabled-themes))
#+END_SRC

*** Do not show splash screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** Other packages 
*** company-mode
Use company-mode in all buffers
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
(setq company-idle-delay 0)
#+END_SRC

*** Smartparens
#+BEGIN_SRC emacs-lisp
(smartparens-global-mode t)
(require 'smartparens-config)
#+END_SRC

*** yasnippet
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-reload-all) ; global-mode can affect negatively other modes, use this instead to used it as a non-global minor mode
(add-hook 'prog-mode-hook
          '(lambda ()
             (yas-minor-mode)))
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

** Formatting
*** Wrap lines
Use =visual line mode= globally.
#+BEGIN_SRC emacs-lisp
;; (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(global-visual-line-mode 1)
#+END_SRC

*** Identation
Use spaces instead of tabs.
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4 indent-tabs-mode nil)
(setq-default c-basic-offset 4 c-default-style "bsd")
#+END_SRC
