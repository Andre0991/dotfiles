#+TITLE: Andre's Emacs configuration

* Configuration
** About
This file was created using [[http://orgmode.org/worg/org-contrib/babel/][org-babel]] mode.
It is an example of literate programming.

Inspired by [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha's Emacs configuration]].

** Initialisation
*** Automatically open some files
#+BEGIN_SRC emacs-lisp
(defun my-init-hook ()
(find-file "~/Dropbox/ciencia_da_computacao/org/notes_computer_science.org")
(find-file "~/Dropbox/org/todo.org")
(find-file "~/dotfiles/emacs_andre.org")
(find-file "/Users/andre0991/Dropbox/english/notes_english_grammar_in_use.org")
(find-file "/Users/andre0991/Dropbox/music_theory/notes_music_theory.org")
(find-file "/Users/andre0991/Dropbox/ciencia_da_computacao/practical_vim/notes_practical_vim.org")
(switch-to-buffer "*scratch*")
)

(add-hook 'after-init-hook 'my-init-hook)
#+END_SRC
*** Package repositories
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
#+END_SRC
*** Get system's environment variables
[[https://github.com/purcell/exec-path-from-shell][Purcell's package]] =exec-path-from-shell= makes this easy on OS X.
#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+END_SRC

** General
*** Spelling
#+BEGIN_SRC emacs-lisp
(setq ispell-dictionary "british")
#+END_SRC
*** Holidays
    Do not use all default holidays.
#+BEGIN_SRC emacs-lisp
(setq holiday-general-holidays nil)
(setq holiday-christian-holidays nil)
(setq holiday-hebrew-holidays nil)
(setq holiday-islamic-holidays nil)
(setq holiday-bahai-holidays nil)
(setq holiday-oriental-holidays nil)
#+END_SRC
    Use the following instead:
*** Relative numbers
From http://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'relative-line-numbers-mode t)
(add-hook 'org-mode-hook 'line-number-mode t)
(add-hook 'org-mode-hook 'column-number-mode t)

(add-hook 'prog-mode-hook 'relative-line-numbers-mode t)
(add-hook 'prog-mode-hook 'line-number-mode t)
(add-hook 'prog-mode-hook 'column-number-mode t)

(add-hook 'markdown-mode-hook 'relative-line-numbers-mode t)
(add-hook 'markdown-mode-hook 'line-number-mode t)
(add-hook 'markdown-mode-hook 'column-number-mode t)
#+END_SRC

*** Move between windows
Use super + arrow keys to move between Emacs windows.

#+BEGIN_SRC emacs-lisp
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings 'super))
#+END_SRC

*** Change "yes or no" to "y or n"
From http://pages.sachachua.com/.emacs.d/Sacha.html
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Formatting
**** Wrap lines
Use =visual line mode= globally.
#+BEGIN_SRC emacs-lisp
;; (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(global-visual-line-mode 1)
#+END_SRC

**** Identation
Use spaces instead of tabs.
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4 indent-tabs-mode nil)
(setq-default c-basic-offset 4 c-default-style "bsd")
#+END_SRC

*** Bell
Use visual alarm instead of sound.
#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC

*** Require final newline
    #+BEGIN_SRC emacs-lisp
    (setq require-final-newline t)
    #+END_SRC
*** Backups
From http://pages.sachachua.com/.emacs.d/Sacha.html#unnumbered-1
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)    ; do not delete old versions
(setq version-control t)         ; backups are numbered
(setq vc-make-backup-files t)    ; by default, emacs does not backup files managed by a version control system. Setting it to "t" modifies that.
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC
*** Semantic
Quoting to the Emacs manual, "Semantic is a package that provides language-aware editing commands based on source code parsers."
It is used by =helm-semantic-or-imenu=.
#+BEGIN_SRC emacs-lisp
(semantic-mode 1)
#+END_SRC
*** Rename file
    Taken from http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/
#+BEGIN_SRC emacs-lisp
(defun rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))
#+END_SRC

** Evil
*** evil-leader
Use space as the leader key.
Required before =evil-mode= is enabled.

#+BEGIN_SRC emacs-lisp
(global-evil-leader-mode)
; enable C-<leader> when not in normal mode
(setq evil-leader/in-all-states 1)
(evil-leader/set-leader "<SPC>")
(evil-leader/set-key
  ; f: files
  "ft" '(lambda () (interactive) (find-file "~/Dropbox/org/todo.org"))
  "fm" '(lambda () (interactive) (find-file "~/Dropbox/org/music_download_and_audition.org"))
  "fb" '(lambda () (interactive) (find-file "~/Dropbox/org/books.org"))
  "fe" '(lambda () (interactive) (find-file "~/dotfiles/emacs_andre.org"))
  ; o: org
  "oa" 'org-agenda
  "oc" 'org-capture
  "od" 'org-drill
  "of" 'org-capture-finalize
  "." 'org-time-stamp
  ; other
  "ff" 'helm-for-files
  "j" 'helm-M-x
  "b" 'helm-mini
  "B" 'ibuffer
  "D" 'dired
  "k" 'kill-this-buffer
  "l" 'helm-locate
  "i" 'helm-semantic-or-imenu
  "q" 'save-buffers-kill-terminal
  "E" 'go-errcheck
  "s" 'save-buffer
  "S" 'save-some-buffers
  "z" 'suspend-emacs
  ; helm
  "ho" 'helm-occur
  "hb" 'helm-descbinds
  "<SPC>" 'evilnc-comment-or-uncomment-lines
  ; evil-nerd-commenter
  "ci" 'evilnc-comment-or-uncomment-lines
  "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
  "cc" 'evilnc-copy-and-comment-lines
  "cp" 'evilnc-comment-or-uncomment-paragraphs
  "cr" 'comment-or-uncomment-region
  "cv" 'evilnc-toggle-invert-comment-line-by-line
  " "  'evilnc-comment-operator ; Use <SPC> instead of \\
  )
#+END_SRC

*** Enable evil-mode
#+BEGIN_SRC emacs-lisp
(evil-mode 1)
#+END_SRC

*** Make esc like C-g
From https://github.com/davvil/.emacs.d/blob/master/init.el
#+BEGIN_SRC emacs-lisp
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
(global-set-key [escape] 'evil-exit-emacs-state)
#+END_SRC

*** Evil related packages
**** evil-numbers
#+BEGIN_SRC emacs-lisp
(require 'evil-numbers)
#+END_SRC

**** evil-surround
#+BEGIN_SRC emacs-lisp
(require 'evil-surround)
(global-evil-surround-mode 1)
#+END_SRC

**** evil-visualstar
#+BEGIN_SRC emacs-lisp
(global-evil-visualstar-mode)
#+END_SRC

** Dired
*** Initialisation
Enable extra features.
#+BEGIN_SRC emacs-lisp
(require 'dired-x)
#+END_SRC
*** Functions
When jumping up one directory with =h=, close the old Dired buffer.
From http://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html
#+BEGIN_SRC emacs-lisp
(defun my-dired-up-directory ()
  "Take dired up one directory, but behave like dired-find-alternate-file"
  (interactive)
  (let ((old (current-buffer)))
    (dired-up-directory)
    (kill-buffer old)
    ))
#+END_SRC
Based on http://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "d" 'dired-jump)

(evil-define-key 'normal dired-mode-map ( kbd "<RET>" ) 'dired-find-alternate-file)
(evil-define-key 'normal dired-mode-map "h" 'my-dired-up-directory)
(evil-define-key 'normal dired-mode-map "l" 'dired-find-alternate-file)
(evil-define-key 'normal dired-mode-map "o" 'dired-sort-toggle-or-edit)
(evil-define-key 'normal dired-mode-map "t" 'dired-toggle-marks)
(evil-define-key 'normal dired-mode-map "m" 'dired-mark)
(evil-define-key 'normal dired-mode-map "u" 'dired-unmark)
(evil-define-key 'normal dired-mode-map "U" 'dired-unmark-all-marks)
(evil-define-key 'normal dired-mode-map "c" 'dired-create-directory)
(evil-define-key 'normal dired-mode-map "n" 'evil-search-next)
(evil-define-key 'normal dired-mode-map "N" 'evil-search-previous)
(evil-define-key 'normal dired-mode-map "q" 'kill-this-buffer)
#+END_SRC
** Windows manipulation
This section depends on Evil initialisation.

**** Rotate windows
"This snippet flips a two-window frame, so that left is right, or up is down. It's sanity preserving if you've got a sliver of OCD."
From http://whattheemacsd.com/buffer-defuns.el-02.html
#+BEGIN_SRC emacs-lisp
(defun rotate-windows ()
  "Rotate your windows"
  (interactive)
  (cond ((not (> (count-windows)1))
         (message "You can't rotate a single window!"))
        (t
         (setq i 1)
         (setq numWindows (count-windows))
         (while  (< i numWindows)
           (let* (
                  (w1 (elt (window-list) i))
                  (w2 (elt (window-list) (+ (% i numWindows) 1)))

                  (b1 (window-buffer w1))
                  (b2 (window-buffer w2))

                  (s1 (window-start w1))
                  (s2 (window-start w2))
                  )
             (set-window-buffer w1  b2)
             (set-window-buffer w2 b1)
             (set-window-start w1 s2)
             (set-window-start w2 s1)
             (setq i (1+ i)))))))
#+END_SRC

**** Split and focus
From Spacemacs, lightly modified.
#+BEGIN_SRC emacs-lisp
(defun split-window-below-and-focus ()
  "Split the window vertically and focus the new window."
  (interactive)
  (split-window-below)
  (windmove-down))

(defun split-window-right-and-focus ()
  "Split the window horizontally and focus the new window."
  (interactive)
  (split-window-right)
  (windmove-right))
#+END_SRC
**** TODO Keybindings
Based on Spacemacs configuration.
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
   "er"  'eval-region
   "el"  'eval-last-sexp
   "ed"  'eval-defun
   ;; "w2"  'layout-double-columns
   ;; "w3"  'layout-triple-columns
   ;; "wb"  'switch-to-minibuffer-window
   "wc"  'delete-window
   ;; "wd"  'toggle-current-window-dedication
   "wH"  'evil-window-move-far-left
   "wh"  'evil-window-left
   "wJ"  'evil-window-move-very-bottom
   "wj"  'evil-window-down
   "wK"  'evil-window-move-very-top
   "wk"  'evil-window-up
   "wL"  'evil-window-move-far-right
   "wl"  'evil-window-right
   "wm"  'delete-other-windows
   ;; "wM"  'toggle-maximize-centered-buffer
   "ww"  'other-frame
   "wr"  'rotate-windows
   "wS"  'split-window-below
   "ws"  'split-window-below-and-focus
   "w-"  'split-window-below
   ;; "wU"  'winner-redo
   ;; "wu"  'winner-undo
   "wV"  'split-window-right
   "wv"  'split-window-right-and-focus
   "wo"  'other-window
   "w|"  'split-window-right)
#+END_SRC

** Helm
*** Keybindings and initialisation
Some snippets of code were taken from http://tuhdo.github.io/helm-intro.html
#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-config)
#+END_SRC

#+NAME helm-keybindings
| Key     | Command                        | Description                         |
|---------+--------------------------------+-------------------------------------|
| TAB     | helm-execute-persistent-action | Perform action without exiting helm |
| C-z     | helm-select-action             | List actions for current item       |
| C-c h o | helm-occur                     | Replace default =occur=             |
| C-c h g | helm-google-suggest            | Open Google search for given string |
| C-x b   | helm-mini                      | List buffers and recentf            |
| M-x     | helm-M-x                       | Replace default M-x                 |

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
(global-set-key (kbd "C-c h o") 'helm-occur)
(global-set-key (kbd "C-c h g") 'helm-google-suggest)

(global-set-key (kbd "M-x") 'helm-M-x)
(setq helm-M-x-fuzzy-match t) ;; fuzzy matching for helm-M-x

(global-set-key (kbd "C-x b") 'helm-mini)
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)

(setq helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match    t)

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd "C-z") 'helm-select-action) ; list actions using C-z

(helm-mode 1)
#+END_SRC

*** helm-locate
Adjust the command equivalent to =locate= command depending on the operational system.
From https://github.com/xiaohanyu/oh-my-emacs/commit/34bf80a0fea61ff1112accfb8448a45dafd2204a
#+BEGIN_SRC emacs-lisp
(require 'cl) ; otherwise emacs complains about "case" in the following block
(setq helm-locate-command
      (case system-type
            ('gnu/linux "locate -i -r %s")
            ('berkeley-unix "locate -i %s")
            ('windows-nt "es %s")
            ('darwin "mdfind -name %s %s")
            (t "locate %s")))
#+END_SRC

*** helm-descbinds
Alternative to default describe-bindings
#+BEGIN_SRC emacs-lisp
(require 'helm-descbinds)
(helm-descbinds-mode)
#+END_SRC
** Customise interface
*** custom-set-variables
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.

 ; consider all themes as safe
 '(custom-safe-themes t)
 ; Do not add extra whitespace
 '(evil-surround-pairs-alist
   (quote
    ((40 "(" . ")")
     (91 "[" . "]")
     (123 "{" . "}")
     (41 "(" . ")")
     (93 "[" . "]")
     (125 "{" . "}")
     (35 "#{" . "}")
     (98 "(" . ")")
     (66 "{" . "}")
     (62 "<" . ">")
     (116 . evil-surround-read-tag)
     (60 . evil-surround-read-tag)
     (102 . evil-surround-function))))
 ; start maximized
 '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC

*** custom-set-faces
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 120 :width normal :foundry "nil" :family "Monaco")))))
#+END_SRC

** Org-mode
*** Initialisation
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC
*** General
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(setq org-startup-with-inline-images t)
; Make org-mode consider the line above the image path indicating its
; size and use it inline and when exporting.
(setq org-image-actual-width nil)

; Pretify Special symbols as UTF-8 characters
(setq org-pretty-entities t)
#+END_SRC
*** Keybindings
**** TODO Create new status for org mode, make "msd" mark as done instead of toggling
Based on https://github.com/edwtjo/evil-org-mode.
#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal org-mode-map
  "<" 'org-metaleft
  ">" 'org-metaright
  "gh" 'outline-up-heading
  "gl" 'outline-next-visible-heading
  "gj" 'org-forward-heading-same-level
  "gk" 'org-backward-heading-same-level
  (kbd "TAB") 'org-cycle ; overwrites evil C-i in terminal
  (kbd "[ s") 'flyspell-check-previous-highlighted-word
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key-for-mode 'org-mode
  "mn" 'outline-next-visible-heading
  "mp" 'outline-previous-visible-heading
  "ml" 'org-insert-link
  "mL" 'org-store-link
  "i" 'helm-org-in-buffer-headings
  "me" 'org-export-dispatch
  "mtrd" 'org-table-delete-row
  "mtri" 'org-table-insert-row
  "mtcd" 'org-table-delete-column
  "mtci" 'org-table-insert-column
  "mt-" 'org-table-insert-hline
  "mtfn" 'org-table-edit-field  ; narrow
  "mtn" 'org-table-create-or-convert-from-region
  "mta" 'org-table-beginning-of-field
  "mte" 'org-table-end-of-field
  "mtw" 'org-meta-return ; wrap field
  "t" 'org-todo ; toggle
  "mo" 'org-open-at-point
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Org-mode global suggested keys
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

*** Timestamps in done tasks
#+BEGIN_SRC emacs-lisp
(setq org-log-done t)
#+END_SRC

*** Remember cursor position
#+BEGIN_SRC emacs-lisp
(setq save-place-file "~/.emacs.d/saveplace")
(setq-default save-place t)
(require 'saveplace)
#+END_SRC
*** imenu depth
#+BEGIN_SRC emacs-lisp
(setq org-imenu-depth 6)
#+END_SRC

*** org-drill
#+BEGIN_SRC emacs-lisp
(require 'org-drill)

; From the org-drill manual: "By default, you will be prompted to save all unsaved buffers at the end of a drill session. If you don't like this behaviour, use the following setting:"
(setq org-drill-save-buffers-after-drill-sessions-p nil)

; The lower, the more frequently items appear. Default is 0.5.
(setq org-drill-learn-fraction 0.4)
#+END_SRC

*** org-babel
**** plantuml
Setup according to http://eschulte.github.io/babel-dev/DONE-integrate-plantuml-support.html
#+BEGIN_SRC emacs-lisp
;; active Org-babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '(;; other Babel languages
   (plantuml . t)))

(setq org-plantuml-jar-path
      (expand-file-name "/usr/local/Cellar/plantuml/8018/plantuml.8018.jar"))
#+END_SRC

*** org-capture
**** File
    #+BEGIN_SRC emacs-lisp
    (setq org-default-notes-file "~/Dropbox/org/todo.org")
    #+END_SRC
**** Templates
     #+BEGIN_SRC emacs-lisp
;     (setq org-capture-templates
;(quote
;       '(("t" "Todo" entry (file+headline "~/Dropbox/org/todo.org" "Tasks")
;             "* TODO %?\n  \n  %a")
;       ("e" "Emacs task" checkitem (file+headline "~/Dropbox/org/todo.org" "Emacs tasks")
;             "- [ ] %?\n\n  %i\n"))))

;   (setq org-capture-templates
;    '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
;           "* TODO %?\n  %i\n  %a")
;      ("j" "Journal" entry (file+datetree "~/org/journal.org")
;           "* %?\nEntered on %U\n  %i\n  %a")))

    (setq org-capture-templates
     '(("t" "Todo" entry (file+headline "~/Dropbox/org/todo.org" "Tasks")
            "* TODO %?\n  %i")
       ("m" "Music download" entry (file+headline "~/Dropbox/org/music_download_and_audition.org" "Download")
            "* TODO Download \n Composer: %? \n Work: \n Link: %i")
       ("b" "Books" entry (file+headline "~/Dropbox/org/books.org" "Unclassified")
            "* TODO Read \n Author: %? \n Title: \n Link: %i")
       ("e" "Emacs task" checkitem (file+headline "~/Dropbox/org/todo.org" "Emacs tasks")
            "- [ ] %?\nEntered on %U\n  %i")))
     #+END_SRC
*** org-agenda
**** File
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (quote ("~/Dropbox/org/todo.org")))
#+END_SRC
** Theme & visual
*** Center window
#+BEGIN_SRC emacs-lisp
;; (require 'centered-window-mode)
;; (centered-window-mode t)
#+END_SRC
*** Disable blinking cursor
    Restore sanity.
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC
*** Remove scrollbars, menu bars, and toolbars
#+BEGIN_SRC emacs-lisp
(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

*** Theme
#+BEGIN_SRC emacs-lisp
(if window-system
    ;; (load-theme 'sanityinc-solarized-light t)
    (load-theme 'zenburn t)
  (load-theme 'wombat t))
#+END_SRC

*** Disable current theme before loading new one
From http://stackoverflow.com/a/15595000
#+BEGIN_SRC emacs-lisp
(defadvice load-theme
  (before theme-dont-propagate activate)
  (mapcar #'disable-theme custom-enabled-themes))
#+END_SRC
*** Do not show splash screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

*** Sublimity
#+BEGIN_SRC emacs-lisp
;; (require 'sublimity)
;; (require 'sublimity-attractive)

;; (setq sublimity-attractive-centering-width 80)
;; (sublimity-attractive-hide-fringes)

;; (sublimity-mode 1)
#+END_SRC
** Other packages
*** Company-mode
Use company-mode in all buffers

#+BEGIN_SRC emacs-lisp
; (with-eval-after-load 'company (define-key company-active-map (kbd "C-n") 'company-select-next) (define-key company-active-map (kbd "C-p") 'company-select-previous))
(with-eval-after-load 'company (define-key company-active-map (kbd "C-n") 'company-select-next) (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC

Robe integration for Ruby.
#+BEGIN_SRC emacs-lisp
; (eval-after-load 'company
;   '(push 'company-robe company-backends))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
(setq company-idle-delay 0)
#+END_SRC

*** Ibuffer
**** Initialisation
#+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'ibuffer-mode 'normal)
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

**** TODO Keybindings
     Differences with the default configuration:
#+BEGIN_SRC emacs-lisp
(eval-after-load 'ibuffer
  '(progn
     (evil-set-initial-state 'ibuffer-mode 'normal)
     (evil-define-key 'normal ibuffer-mode-map
       (kbd "J") 'ibuffer-jump-to-buffer
       (kbd "j") 'evil-next-line
       (kbd "k") 'evil-previous-line
       (kbd "K") 'ibuffer-do-kill-lines
       )
    )
)
#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp
(smartparens-global-mode t)
(require 'smartparens-config)
#+END_SRC

*** Yasnippet
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-reload-all) ; global-mode can affect negatively other modes, use this instead to use it as a non-global minor mode
(add-hook 'prog-mode-hook
          '(lambda ()
             (yas-minor-mode)))
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

*** Slime
**** Initialisation
From http://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html
#+BEGIN_SRC emacs-lisp
(require 'elisp-slime-nav)

(defun my-lisp-hook ()
  (elisp-slime-nav-mode)
  (eldoc-mode)
  )

(add-hook 'emacs-lisp-mode-hook 'my-lisp-hook)
#+END_SRC
**** TODO Keybindings
     From http://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html#fn7
     Not working yet.
     #+BEGIN_SRC emacs-lisp
     (evil-define-key 'normal emacs-lisp-mode-map (kbd "K")
       'elisp-slime-nav-describe-elisp-thing-at-point)
     #+END_SRC
     #+BEGIN_SRC emacs-lisp
     (evil-leader/set-key-for-mode 'emacs-lisp-mode
       "mer" 'eval-region
     )
     #+END_SRC

*** Rainbow parenthesis
    #+BEGIN_SRC emacs-lisp
; (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    #+END_SRC
*** Magit
From http://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html
#+BEGIN_SRC emacs-lisp
;    (evil-set-initial-state 'magit-mode 'normal)
;    (evil-set-initial-state 'magit-status-mode 'normal)
;    (evil-set-initial-state 'magit-diff-mode 'normal)
;    (evil-set-initial-state 'magit-log-mode 'normal)
;    (evil-define-key 'normal magit-mode-map
;        "j" 'magit-goto-next-section
;        "k" 'magit-goto-previous-section)
;    (evil-define-key 'normal magit-log-mode-map
;        "j" 'magit-goto-next-section
;        "k" 'magit-goto-previous-section)
;    (evil-define-key 'normal magit-diff-mode-map
;        "j" 'magit-goto-next-section
;        "k" 'magit-goto-previous-section)))
#+END_SRC
*** Markdown-mode
**** Initialisation
Use Github flavored markdown.
#+BEGIN_SRC emacs-lisp
; (autoload 'markdown-mode "markdown-mode"
;   "Major mode for editing Markdown files" t)
; (add-to-list 'auto-mode-alist '("\\.markdown\\'" . gfm-mode))
; (add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode))
#+END_SRC
**** Keybindings
#+BEGIN_SRC emacs-lisp
; (evil-leader/set-key-for-mode 'gfm-mode
;   "ml" 'markdown-insert-link
; )
#+END_SRC
** Functions
*** Insert image from Screenshot's folder to org-mode buffer
Thanks to finster from #emacs on freenode for providing that code. I added the insertion and newline.
#+BEGIN_SRC emacs-lisp
(defun get-newest-file-from-dir (dir)
  "Return the file name of the newes file in DIR."
  (when (file-directory-p dir)
    (expand-file-name (car (split-string (shell-command-to-string (format "ls -t %s | head -1" dir)) "\n" t))
                      dir)))



(defun insert-org-image (image-name)
  "Moves image from Dropbox folder to current directory, changing its name."
  (interactive "sImage name: ")
  (let* ((indir (expand-file-name "/Users/andre0991/Dropbox/Screenshots"))
         (infile (get-newest-file-from-dir indir))
         (outdir (concat (file-name-directory (buffer-file-name)) "/media"))
         (outfile (expand-file-name (concat image-name ".png") outdir)))
         ;; (outfilepng (concat outfile ".png"))
    (unless (file-directory-p outdir)
      (make-directory outdir t))
    (rename-file infile outfile))
  (insert (concat (concat "[[./media/" image-name) ".png]]"))
  (newline)
  (newline)
  ;; (org-display-inline-images)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun get-newest-file-from-dir_new (dir)
  "Return the file name of the newes file in DIR."
  (when (file-directory-p dir)
    (expand-file-name (car (split-string (shell-command-to-string (format "ls -t %s | head -1" dir)) "\n" t))
                      dir)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun insert-org-image-with-name ()
  (interactive)
  "Moves image from Dropbox folder to current directory, changing its name."
  (let* ((indir (expand-file-name "/Users/andre0991/Dropbox/Screenshots"))
         (infile (get-newest-file-from-dir indir))
         (outdir (concat (file-name-directory (buffer-file-name)) "/media"))
         (time (current-time))
         (outfile (expand-file-name (concat time ".png") outdir)))
         ;; (outfilepng (concat outfile ".png"))
    (unless (file-directory-p outdir)
      (make-directory outdir t))
    (rename-file infile outfile))
  (insert (concat (concat "[[./media/" time) ".png]]"))
  (newline)
  (newline)
  ;; (org-display-inline-images)
  )
#+END_SRC
*** Rename file
From http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/
#+BEGIN_SRC emacs-lisp
(defun rename-this-buffer-and-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (cond ((get-buffer new-name)
               (error "A buffer named '%s' already exists!" new-name))
              (t
               (rename-file filename new-name 1)
               (rename-buffer new-name)
               (set-visited-file-name new-name)
               (set-buffer-modified-p nil)
               (message "File '%s' successfully renamed to '%s'" name (file-name-nondirectory new-name))))))))
#+END_SRC
** Latex
*** Initialization
According to the Auctex manual,

"
In order to get support for many of the LaTeX packages you will use
in your documents, you should enable document parsing as well, which can
be achieved by putting
"

#+BEGIN_SRC emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode) ; make `<key> expand math macro by default
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
#+END_SRC

*** Workaround - fonts
The =C-c C-f= keybinding is a interactive function that reads the next keys.
In order to get functions for these actions, we have to make the following definitions:
From http://stackoverflow.com/questions/14629198/redefine-auctex-font-and-compile-keybindings
#+BEGIN_SRC emacs-lisp
(defun TeX-italic()
  (interactive)
  (TeX-font nil ?\C-i))

(defun TeX-bold()
  (interactive)
  (TeX-font nil ?\C-b))

(defun TeX-emphasis()
  (interactive)
  (TeX-font nil ?\C-e))

(defun TeX-font-delete()
  (interactive)
  (TeX-font nil ?\C-d))
#+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key-for-mode 'latex-mode
  "mm" 'TeX-insert-macro
  "ms" 'LaTeX-section
  "me" 'LaTeX-environment
  "mc" 'TeX-command-master
  "m`" 'TeX-next-error
  "mfb" 'TeX-italic
  "mfi" 'TeX-bold
  "mfe" 'TeX-emphasis
  "mfd" 'TeX-font-delete
  ;; preview-latex
  "mpb" 'preview-buffer
  "mpr" 'preview-region
  "mpp" 'preview-at-point
)

; (define-key LaTeX-mode-map (kbd "<C-return>") 'LaTeX-insert-item) ; consistent with org-mode
#+END_SRC
** Ruby
   Setup based on guide at http://lorefnon.me/2014/02/02/configuring-emacs-for-rails.html
*** Emacs and Ruby Version Manager (rvm) integration.
    #+BEGIN_SRC emacs-lisp
; (require 'rvm)
; (rvm-use-default) ;; use rvm's default ruby for the current Emacs session
    #+END_SRC
*** Ruby shell inside emacs
    We get a REPL buffer with =inf-ruby=.
#+BEGIN_SRC emacs-lisp
; (evil-leader/set-key-for-mode 'ruby-mode
;   "mr" 'rvm-activate-corresponding-rub
; )
#+END_SRC
*** Code navigation and completion
    "Robe is a code assistance tool that uses a Ruby REPL subprocess with your application or gem code loaded, to provide information about loaded classes and modules, and where each method is defined."
    From https://github.com/dgutov/robe
#+BEGIN_SRC emacs-lisp
; (require 'robe)
; (add-hook 'ruby-mode-hook 'robe-mode)

#+END_SRC
*** TODO Workaround for Flycheck
Flycheck wasn't able to find the right PATH for ruby gems installed by rvm, so we set it manually.
TODO: Make it Mac specific.
#+BEGIN_SRC emacs-lisp
; (setq flycheck-ruby-rubylint-executable "/Users/andre0991/.rvm/gems/ruby-2.1.0")
; (setq flycheck-ruby-rubocop-executable "/Users/andre0991/.rvm/gems/ruby-2.1.0")
#+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp
; (evil-leader/set-key-for-mode 'ruby-mode
;   "eR" 'ruby-send-region
;   "er" 'ruby-send-region-and-go
; )
#+END_SRC

Make the arrow keys search through history instead of jumping to other lines (which can be done with =j= and =k= using Evil).
#+BEGIN_SRC emacs-lisp
; (define-key inf-ruby-mode-map (kbd "<up>") 'comint-previous-input)
; (define-key inf-ruby-mode-map (kbd "<down>") 'comint-next-input)
#+END_SRC
